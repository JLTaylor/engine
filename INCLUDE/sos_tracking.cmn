*     sos_tracking.cmn
*     include file for sos tracking intermediate results
*     D. F. Geesaman         1 September 1993
*     modified  dfg          10 Feb 94
*                              change name to sos_tracking.cmn
*                              put sluno and debugflags from parameters to CTP
* $Log$
* Revision 1.14  1996/01/17 15:05:05  cdaq
* (JRA) Change name of various correction variables.
*       Add some efficiency accumulator variables.
*
* Revision 1.13  1995/05/22 19:01:16  cdaq
* (SAW) Split gen_data_data_structures into gen, hms, sos, and coin parts
*
* Revision 1.12  1995/04/06  20:30:04  cdaq
* (SAW) Fix wc plane names.  Change residuals variable names
*
* Revision 1.11  1995/03/13  19:18:06  cdaq
* (SAW) Names of fract equivalence arrays reflect SOS chamber plane names
*
* Revision 1.10  1995/01/27  20:22:58  cdaq
* (SAW) Let sdc_planes_per_chamber be a ctp parameter
*
* Revision 1.9  1994/12/01  17:22:08  cdaq
* (SAW) Add s_hms_style_chambers flag to treat SOS chambers like HMS
*       Add sdc_planes_per_chamber (calculated in s_generate_geometry)
*       Make gplanesdc equivalenced with gplanesdc1, ...
*
* Revision 1.8  1994/11/22  18:40:41  cdaq
* (SAW) Add s's in front of fract, aa3, det3, aainv3.  Remove fractinterp
*       Cleaned up ?DC_NUM_CHAMBERS and ?MAX_NUM_CHAMBERS stuff
*
* Revision 1.7  1994/11/21  18:02:58  cdaq
* (SPB) Recopied from hms file and modified names for SOS
*
* Revision 1.6  1994/08/16  03:57:09  cdaq
* (SAW) Change some variables to parm CTPTYPE
*
* Revision 1.5  1994/08/05  20:06:27  cdaq
* (SAW) Add makereg directive with required include files
*
* Revision 1.4  1994/08/05  20:00:36  cdaq
* (SAW) Add "CTPTYPE=event,parm" directive for auto generation of CTP reg calls
*
* Revision 1.3  1994/06/06  17:06:05  cdaq
* (DFG) add ssingle_stub
*
* Revision 1.2  1994/03/24  18:40:37  cdaq
* (DFG) Additional parameters
*
* Revision 1.1  1994/02/22  14:47:57  cdaq
* Initial revision
*
*     The following include statments must precede the inclusion of this
*     file in each routine that uses it.  The *%% syntax is also a
*     directive to makereg to tell it to include the code in the program
*     that it generates.
*
*%%   include 'sos_data_structures.cmn'
*
*     CTPTYPE=parm
*
*
*     Parameters for drift time to distance calculation
*
      integer*4 sdriftbins_max          ! maximum number of bins for drift
* change to 150
      parameter (sdriftbins_max=200)    ! lookup table time
      real*4    sdriftbins              ! number of bins for drift time lookup table
      real*4    sdriftbinsz             ! drift bin size in nsec of lookup
      real*4    sdrift1stbin            ! drift time of 1st bin in nsec of lookup table
      real*4     sfract             !fraction of integrated time spectrum
      real*4 swc1u1fract(sdriftbins_max),swc1u2fract(sdriftbins_max),
     &       swc1x1fract(sdriftbins_max),swc1x2fract(sdriftbins_max),
     &       swc1v1fract(sdriftbins_max),swc1v2fract(sdriftbins_max),
     &       swc2u1fract(sdriftbins_max),swc2u2fract(sdriftbins_max),
     &       swc2x1fract(sdriftbins_max),swc2x2fract(sdriftbins_max),
     &       swc2v1fract(sdriftbins_max),swc2v2fract(sdriftbins_max)

      equivalence (swc1u1fract(1),sfract(1,1))
      equivalence (swc1u2fract(1),sfract(1,2))
      equivalence (swc1x1fract(1),sfract(1,3))
      equivalence (swc1x2fract(1),sfract(1,4))
      equivalence (swc1v1fract(1),sfract(1,5))
      equivalence (swc1v2fract(1),sfract(1,6))
      equivalence (swc2u1fract(1),sfract(1,7))
      equivalence (swc2u2fract(1),sfract(1,8))
      equivalence (swc2x1fract(1),sfract(1,9))
      equivalence (swc2x2fract(1),sfract(1,10))
      equivalence (swc2v1fract(1),sfract(1,11))
      equivalence (swc2v2fract(1),sfract(1,12))

      common/SOS_DRIFT/sfract(sdriftbins_max,SMAX_NUM_DC_PLANES),
     $     sdriftbinsz,sdrift1stbin,sdriftbins

      integer*4 sdc_num_planes   ! actual number of dc chambers - set in CTP
      integer*4 sdc_num_chambers    ! actual number of chambers - set in CTP
      integer*4 sdc_planes_per_chamber
      integer*4 smax_chamber_hits
      parameter (smax_chamber_hits=544)
      integer*4 smax_space_points   ! maximum number of space points
      integer*4 smax_hits_per_point ! maximum number of hits per point
      parameter (smax_space_points=50)
      parameter (smax_hits_per_point=20)
*
*     CTPTYPE=event
*
      integer*4 snspace_points  ! number of space points in each chamber
      integer*4 snspace_points_tot ! total number of space points after select.

      integer*4 gplanesdc(smax_space_points,smax_num_chambers)   ! good plane pattern unit, set bit if respective plane hit
      integer*4 gplanesdc1(smax_space_points)  ! good plane pattern unit, set bit if respective plane hit
      integer*4 gplanesdc2(smax_space_points)  ! good plane pattern unit, set bit if respective plane hit
      integer*4 gplanesdc3(smax_space_points)  ! good plane pattern unit, set bit if respective plane hit

      equivalence (gplanesdc1(1),gplanesdc(1,1))
      equivalence (gplanesdc2(1),gplanesdc(2,1))
      equivalence (gplanesdc3(1),gplanesdc(3,1))

      real*4 sspace_points         ! array of x, y of space points
      real*4 sbeststub              ! array of stubs fit to each space point
      real*4 sdc_sing_drifttime ! array of fully corrected drift times for each plane
      real*4 sdc_sing_driftdis  ! array of final drift distances for each plane

*
*     CTPTYPE=parm
*
      real*4 sspace_point_criterion
*
*     CTPTYPE=event
*
      integer*4 sspace_point_hits  ! array of n rows of space points
                                   ! (n,1) = number of hits
                                   ! (n,2) = number of valid combinations
                                   ! (n,3...) hit numbers for space point
      integer*4 sncham_hits
*
*     CTPTYPE=parm
*
      integer*4 smin_hit
      integer*4 smin_combos

      real*4 sxt_track_criterion   ! stub link criterion on x_t
      real*4 syt_track_criterion   ! stub link criterion on y_t
      real*4 sxpt_track_criterion   ! stub link criterion on xp_t
      real*4 sypt_track_criterion  ! stub link criterion on yp_t

*
*     CTPTYPE=event
*
      integer*4 strack_fit_num     ! track number in fitting loop

      integer*4 snum_fpray_param   ! number of ray parameters in focal plane
      parameter (snum_fpray_param=4)

*
*     CTPTYPE=parm
*
      integer*4 sdc_tdc_min_win   ! drift chamber tdc min value for good hit
      integer*4 sdc_tdc_max_win   ! drfit chamber tdc max value for good hit
      integer*4 smax_pr_hits      ! max number of hits in each plane for
                                  ! pattern recognition to be done in that pla
      logical sdc_readout_x(smax_num_dc_planes)
                                 ! true = read out from side (like x plane)
      real*4 sdc_readout_corr(smax_num_dc_planes)
                                 ! wire path length/dist. from readout side
      real*4 sdc_wire_velocity    ! propogation velocity of signal on wire (cm--M/ns)
      real*4 sdc_central_time(smax_num_dc_planes) !ave. time for signal to reach card
      real*4 sdc_drifttime_sign(smax_num_dc_planes) !sign of correction term.
*
*     CTPTYPE=event
*
      INTEGER*4 SDC_HITS_PER_PLANE
*
      common/SOS_TRACKING/
     &     sbeststub(smax_space_points,snum_fpray_param),
     &     sspace_point_criterion(smax_num_chambers),
     &     sxt_track_criterion,syt_track_criterion,
     &     sxpt_track_criterion,sypt_track_criterion,
     &     sspace_points(smax_space_points,2),
     &     sspace_point_hits(smax_space_points,smax_hits_per_point+2),
     &     snspace_points(5),snspace_points_tot,
     &     sncham_hits(smax_num_chambers),smin_hit(smax_num_chambers),
     &     smin_combos(smax_num_chambers),strack_fit_num,
     &     sdc_num_planes,sdc_num_chambers,
     &     sdc_planes_per_chamber,
     &     sdc_tdc_min_win(SMAX_NUM_DC_PLANES), 
     &     sdc_tdc_max_win(SMAX_NUM_DC_PLANES),
     &     smax_pr_hits(smax_num_chambers),
     &     sdc_wire_velocity,
     &     sdc_sing_drifttime(SMAX_NUM_DC_PLANES),
     &     sdc_sing_driftdis(SMAX_NUM_DC_PLANES),
     &     SDC_HITS_PER_PLANE(SMAX_NUM_DC_PLANES),
     &     gplanesdc,
     &     sdc_central_time,
     &     sdc_drifttime_sign,
     &     sdc_readout_corr,
     &     sdc_readout_x

*     
*     CTPTYPE=parm
*
      real*8 saa3,saainv3         ! matrix AA and its inverse AAINV 
      real*8 sdet3               ! array of determinants of AA
      common/SOS_TFIT_MATRIX/
     &     saa3(3,3),saainv3(3,3,smax_num_dc_planes+smax_num_chambers)
     $     ,sdet3(smax_num_dc_planes+smax_num_chambers)

*     sos print routines logical unit number for output
      integer*4 sluno
*     debug print flags
*     if flags .ne. 0 then execute debug code
      integer*4 sdebugprintrawdc
      integer*4 sdebugprintdecodeddc
      integer*4 sdebugflagpsi          
      integer*4 sdebugflaggeometry
      integer*4 sdebugflagpr
      integer*4 sdebugflagstubs
      integer*4 sdebuglinkstubs
      integer*4 sdebugtrackprint
      integer*4 sdebugstubchisq
      integer*4 sdebugtartrackprint     ! call s_print_tar_track
*      integer*4 sdebug_mc_start_time    ! kludge for Monte Carlo start time
      integer*4 sdebugdumptof           ! dumps tof fitting data
      integer*4 sdebugdumpcal           ! dumps cal fitting data
      integer*4 sdebugcalcpeds          ! calc peds from physics events.
      integer*4 ssingle_stub            ! switch to make tracks of all stubs
      integer*4 sSmallAngleApprox       ! switch for alternate L/R determ. of Y,Yprime planes
      integer*4 s_hms_style_chambers    ! Using HMS style drift chambers
      common/SOS_TRACKFLAGS/
     &     sluno,
     &     sdebugflagpsi,
     &     sdebugflaggeometry,
     &     sdebugflagpr,
     &     sdebugflagstubs,
     &     sdebuglinkstubs,
     &     sdebugtrackprint,
     &     sdebugstubchisq,
     &     sdebugtartrackprint,
     &     sdebugprintrawdc,
     &     sdebugprintdecodeddc,
     &     sdebugdumptof,
     &     sdebugdumpcal,
     &     sdebugcalcpeds,
     &     ssingle_stub,
     &     sSmallAngleApprox,
     &     s_hms_style_chambers
*     &     sdebug_mc_start_time,
*
*     CTPTYPE=parm
*
*     These arrays are presumably scalers to per run statistics
*
*     array to hold multiple hits per wire
      integer*4 sdc_max_wires_per_plane   ! maximum number of wires per plane
* change to 64
      parameter (sdc_max_wires_per_plane = 200)
      integer*4 swire_mult(sdc_max_wires_per_plane,SMAX_NUM_DC_PLANES)
      integer*4 swire_early_mult(sdc_max_wires_per_plane,SMAX_NUM_DC_PLANES)
      integer*4 swire_late_mult(sdc_max_wires_per_plane,SMAX_NUM_DC_PLANES)
      integer*4 swire_extra_mult(sdc_max_wires_per_plane,SMAX_NUM_DC_PLANES)
*
      common/sos_wire_multiplicity/
     &     swire_mult,
     &     swire_early_mult,
     &     swire_late_mult,
     &     swire_extra_mult
*
*     CTPTYPE=event
*
*  complete 2-D array for residuals in all planes over all tracks
      real*4 sdc_single_residual(SNTRACKS_MAX,SMAX_NUM_DC_PLANES)
      real*4 sdc_double_residual(SNTRACKS_MAX,SMAX_NUM_DC_PLANES)

*     djm 8/26/94 arrays containing single and double residual arrays which can be
*     histogrammed in the normal fashion (ie, not hardwired histograms).

      real*4 sdc_sing_res(SMAX_NUM_DC_PLANES)
      real*4 sdc_dbl_res(SMAX_NUM_DC_PLANES)
      real*4 sdc_plane_wirecoord(SNTRACKS_MAX,SMAX_NUM_DC_PLANES)
      real*4 sdc_plane_wirecenter(SNTRACKS_MAX,SMAX_NUM_DC_PLANES)

      common/SOS_RESIDUAL/
     &     sdc_single_residual,
     &     sdc_double_residual,
     &     sdc_sing_res,
     &     sdc_dbl_res,
     &     sdc_plane_wirecoord,
     &     sdc_plane_wirecenter


*
*     CTPTYPE=parm
*
      real*4 sdc_min_plane_eff(SMAX_NUM_DC_PLANES)
      real*4 sdc_min_wire_eff
*
*     CTPTYPE=event
*
      real*4 sdc_track_coord(SNTRACKS_MAX,SMAX_NUM_DC_PLANES)
      real*4 ssdc_track_coord(SMAX_NUM_DC_PLANES)
      integer*4 sdc_shouldhit(SMAX_NUM_DC_PLANES,SDC_MAX_WIRES_PER_PLANE)
      integer*4 sdc_didhit(SMAX_NUM_DC_PLANES,SDC_MAX_WIRES_PER_PLANE)
      integer*4 sdc_shouldsum(SMAX_NUM_DC_PLANES)
      integer*4 sdc_didsum(SMAX_NUM_DC_PLANES)
      integer*4 sdc_eff(SMAX_NUM_DC_PLANES)

      common/sos_dc_track_efficiency/
     &   sdc_track_coord,  !track position per plane, in x,y,u,v directions.
     &   ssdc_track_coord, !track position in x,y,,u,v directions-final track.
     &   sdc_shouldhit,    !times a wire should have fired.
     &   sdc_didhit,       !times a wire did fire.
     &   sdc_shouldsum,    !sum over plane.
     &   sdc_didsum,       !sum over plane.
     &   sdc_eff,          !effic. per plane.
     &   sdc_min_wire_eff, !warning level for wire effic.
     &   sdc_min_plane_eff !warning level for plane effic.
